FORMAT: 1A
HOST: http://toptalq-be.dev.clapp.eu/api/1.0

# Toptalq

- Minden http request `Content-type: application/json`-t küld és fogad, kivéve, ha mást írunk lentebb
- Minden API endpoint standard http headerekkel és http hibakódokkal dolgozik
- Ha a kliensnek van auth tokene (azaz “be van jelentkezve”), akkor minden további http requesthez csatolnia kell egy `Authorization: Bearer <auth token>` headert

## Authentication [/auth]

### Login [POST /auth/login]

Bejelentkezni email cimmel es jelszoval vagy social auth segítségével.

Ez az endpoint sikeres bejelentkezés esetén egy JWT tokent ( https://jwt.io ) ad vissza. A token a következőket tartalmazza:

```
{
    "roles": [], //array of strings, másolat a belépett user entity `roles` mezőjéről
    "sub": 2, //string/int user unique id
    "iss": "http://toptalq-be.dev.clapp.eu/api/1.0/auth/login", //string token származási helye
    "iat": 1464959200, //int unix timestamp, token létrehozásának időpontja
    "exp": 1464962800, //int unix timestamp, token lejáratának időpontja
    "nbf": 1464959200, //int unix timestamp, token érvényesség kezdetének időpontja
    "jti": "45ac5cd03267ce11158177ec61c1bbc5" //string token unique id
 }
```

+ Request (application/json)

    + Body

            {
                "email": "user@toptalq.hu",
                "password": "newpassword"
            }

+ Response 200 (application/json)

    + Body

            {
                "token": "auth token"
            }

### Reset password [POST /auth/password/reset]

+ Request (application/json)

    + Body

            {
                "email": "user@toptalq.hu"
            }

+ Response 200 (application/json)

### Confirm code [POST /auth/password/confirm]

+ Request (application/json)

    + Body

            {
                "token": "1234",
                "password": "newpassword",
                "email": "user@toptalq.hu"
            }

+ Response 200 (application/json)

### Refresh token [POST /auth/token]

Élő, még nem lejárt token lecserélése egy új tokenre. - csak bejelentkezve!

+ Response 200 (application/json)

    + Attributes

        + token: `valid token` (string)


## Social Authentication [/auth/{provider}]

+ Parameters
    + provider (required, string, `facebook`) - facebook or google

### Connect [POST]

Amennyiben nem letezik a rendszerünkben a megfelelő user account, az API létrehozza.
Amennyiben a felhasználónak még el kell fogadnia a terms and conditions-t (mert még nem regisztrált, vagy mert új terms van amit újra el kell fogadnia), akkor ez elsőre failelni fog 401-gyel, és csak a megfelelő paraméterek küldése mellett fogunk tudni tovább haladni.

+ Request (application/json)

    + Attributes

        + token: `facebook auth token` (required, string)

+ Response 401 (application/json)

    + Attributes

        + `terms_accepted`: false (boolean) - a felhasználó elfogadta-e a terms and conditions-t

+ Request (application/json)

    + Attributes

        + token: `facebook auth token` (required, string)
        + `terms_accepted`: true (required, boolean) - a felhasználó elfogadja-e a terms and conditions-t

+ Response 200 (application/json)

    + Body

            {
                "token": "auth token",
            }



+ Response 201 (application/json)

    + Body

            {
                "token": "auth token",
            }


### Disconnect [DELETE]

+ Response 200 (application/json)


## User  [/user]

### User list [GET]

+ Response 404 (application/json)
+ Response 200 (application/json)

    + Attributes(UserPager)

### Create user [POST]

+ Request (application/json)

    + Body

            {
                "email": "user@toptalq.hu" (required, string),
                "password": "newpasword" (required, string),
                "terms_accepted": true (required, boolean)
            }

+ Response 201

    + Body

            {
                "token": "auth token"
            }

## User Details [/user/{id}]

+ Parameters
    + id (required, number, `1`) - User ID or me

### User detail [GET]

+ Response 200 (application/json)

    + Attributes(User)

### Edit user data [PUT]

+ Request (application/json)

    + Body

            {
                "password": "newpasword" (optional, string),
                "request_notification": true (optional, boolean),
                "denied_sources": Source, Source (array[Source], optional)
            }

+ Response 200 (application/json)

    + Attributes(User)

## Favourite article [/user/{user_id}/favourite_article]

+ Parameters
    + user_id (required, number, `1`) - User ID

### List user's favourites article [GET /user/{user_id}/favourite_article?{page}]

+ Parameters
    + user_id (required, number, `1`) - User ID
    + page (optional, number) - Oldalszám

+ Request (application/json)

+ Response 200 (application/json)

    + Attributes(ArticlePager)

### Favourite an article [POST]

+ Request (application/json)

    + Attributes(Article)

+ Response 200 (application/json)

## Remove article from favourites [/user/{user_id}/favourite_article/{article_id}]

+ Parameters
    + user_id (required, number, `1`) - User ID
    + article_id (required, number, `1`) - Article ID

### Remove an article from favourites [DELETE]

+ Response 200 (application/json)

## Favourite topic [/user/{user_id}/favourite_topic]

+ Parameters
    + user_id (required, number, `1`) - User ID

### List user's favourites topics [GET /user/{user_id}/favourite_topic?{page}]

+ Parameters
    + user_id (required, number, `1`) - User ID
    + page (optional, number) - Oldalszám

+ Request (application/json)

+ Response 200 (application/json)

    + Attributes(TopicRelatedArticlesPager)

### Favourite a topic [POST]

+ Request (application/json)

    + Attributes(Topic)

+ Response 200 (application/json)

## Remove topic from favourites [/user/{user_id}/favourite_topic/{topic_id}]

+ Parameters
    + user_id (required, number, `1`) - User ID
    + topic_id (required, number, `1`) - Topic ID

### Remove a topic from favourites [DELETE]

+ Response 200 (application/json)

## Follow topic [/user/{user_id}/follow_topic]

+ Parameters
    + user_id (required, number, `1`) - User ID

### List user's followed topics [GET]

+ Request (application/json)

+ Response 200 (application/json)

    + Attributes(TopicRelatedArticles)

### Follow a topic [POST]

+ Request (application/json)

    + Attributes(Topic)

+ Response 200 (application/json)

## Unfollow a topic [/user/{user_id}/follow_topic/{topic_id}]

+ Parameters
    + user_id (required, number, `1`) - User ID
    + topic_id (required, number, `1`) - Topic ID

### Remove a topic from followed topics [DELETE]

+ Response 200 (application/json)


## Head [/head]

### Head list [GET]

+ Response 200 (application/json)

    + Attributes(array[Head])

## Head Details [/head/{id}]

+ Parameters
    + id (required, number, `1`) - Head ID

### Head detail [GET]

+ Response 200 (application/json)

    + Attributes(Head)

## Head highlights [/head/{head_id}/highlight]

### List head's highlights [GET]

+ Request (application/json)

+ Response 200 (application/json)

    + Attributes(array[Topic])

## Mixedcontent [/head/{head_id}/mixedcontent?{page,order_by}]

+ Parameters
    + head_id (required, number, `1`) - Head ID
    + page (optional, number) - Oldalszám
    + order_by (optional, enum[string]) - Rendezési mód
        + Members
            + date
            + popularity

### List head's mixedcontent [GET]

A Mixedcontent object egy wrapper object, aminek csak annyi a szerepe, hogy vegyes listát kaphasson vissza a kliens a TopicRelatedArticles és az Article object-ekből.
Tehát a Mixedcontent object-ben vagy csak "topic" kulcs létezik, és abban a TopicRelatedArticles object, vagy csak az "article" kulcs, és abban az Article object.

+ Request (application/json)

+ Response 200 (application/json)

    + Attributes(MixedcontentPager)

## Head topic [/head/{head_id}/topic?{page}]

+ Parameters
    + head_id (required, number, `1`) - Head ID
    + page (optional, number) - Oldalszám

### List head's topic [GET]

+ Request (application/json)

+ Response 200 (application/json)

    + Attributes(TopicRelatedArticles)

## Head article [/head/{head_id}/article?{page,order_by}]

+ Parameters
    + head_id (required, number, `1`) - Head ID
    + page (optional, number) - Oldalszám
    + order_by (optional, enum[string]) - Rendezési mód
        + Members
            + date
            + popularity

### List head's article [GET]

+ Request (application/json)

+ Response 200 (application/json)

    + Attributes(ArticlePager)


## Topic  [/topic?{page,query,order_by,order,limit}]

+ Parameters
    + page (optional, number) - Oldalszám
    + query (optional, string) - Keresőszó
    + order_by (optional, enum[string]) - Rendezési mód
        + Default `date`
        + Members
            + date
            + popularity
            + articles
            + reads
    + order (optional, enum[string]) - Rendezés iránya
        + Default `desc`
        + Members
            + desc
            + asc
    + limit (optional, number, `6`)
        + Default `10`

### Topic list [GET]

+ Response 404 (application/json)
+ Response 200 (application/json)

    + Attributes(TopicRelatedArticlesPager)

## Topic Details [/topic/{id}]

+ Parameters
    + id (required, number, `1`) - Topic ID

### Topic detail [GET]

+ Response 200 (application/json)

    + Attributes(TopicDetailed)

## Topic article [/topic/{topic_id}/article?{page,popularity,order,timeline}]

+ Parameters
    + topic_id (required, number, `1`) - Topic ID
    + page (optional, number) - Oldalszám
    + popularity (optional, enum[string]) - Popularity filter
        + Members
            + all - viewcount0
            + viewcount5
            + viewcount50
            + viewcount100
            + popular - viewcount150
    + order (optional, enum[string])
        + Members
            + asc
            + desc
    + timeline (optional, enum[string])
        + Members
            + left
            + right

### List topic's article [GET]

+ Request (application/json)

+ Response 200 (application/json)

    + Attributes(ArticlePager)


## Article [/article?{page,query,celeb,source,order_by,order,limit,hour_limit}]

+ Parameters
    + page (optional, number) - Oldalszám
    + query (optional, string) - Keresőszó
    + celeb (optional, number, `1`) - Celeb ID
    + source (optional, number, `1`) - Source ID
    + order_by (optional, enum[string]) - Rendezési mód
        + Default `date`
        + Members
            + date
            + popularity
    + order (optional, enum[string]) - Rendezés iránya
        + Default `desc`
        + Members
            + desc
            + asc
    + limit (optional, number, `6`)
        + Default `10`
    + hour_limit (optional, number, `4`)

### Article list [GET]

+ Response 404 (application/json)
+ Response 200 (application/json)

    + Attributes(ArticlePager)

## Article Details [/article/{id}]

+ Parameters
    + id (required, number, `1`) - Article ID

### Article detail [GET]

+ Response 200 (application/json)

    + Attributes(Article)

## Article interaction [/article/{article_id}/interaction]

+ Parameters
    + article_id (required, number, `1`) - Article ID

### Interaction with an article [POST]

+ Request (application/json)

    + Body

            {
                "type": "like" (enum[string], required) // like, dislike
                "guest_hash": "device generated hash" (string, optional) // for lightweight identification of non-loggedin users
            }

+ Response 200 (application/json)


## Celeb [/celeb?{page,query,order_by,order,limit}]

+ Parameters
    + page (optional, number) - Oldalszám
    + query (optional, string) - Keresőszó
    + order_by (optional, enum[string]) - Rendezési mód
        + Default `date`
        + Members
            + date
            + popularity
            + article_number
    + order (optional, enum[string]) - Rendezés iránya
        + Default `desc`
        + Members
            + desc
            + asc
    + limit (optional, number, `6`)
        + Default `10`

### Celeb list [GET]

+ Response 404 (application/json)
+ Response 200 (application/json)

    + Attributes(CelebPager)

## Celeb Details [/celeb/{id}]

+ Parameters
    + id (required, number, `1`) - Celeb ID

### Celeb detail [GET]

+ Response 200 (application/json)

    + Attributes(Celeb)


## Source [/source]

### Source list [GET]

+ Response 200 (application/json)

    + Attributes(array[Source])


# Data Structures

## Pager

+ total: 4 (number, required)
+ per_page: 15 (number, required)
+ current_page: 1 (number, required)
+ last_page: 1 (number, required)
+ from: 1 (number, required)
+ to: 2 (number, required)

## UserPager (object)
+ Include Pager
+ data: User, User (array[User], required)

## User (object)
+ id: 7 (number, required)
+ email: `user@toptalq.hu` (string, optional)
+ request_notification: true (boolean, required)
+ denied_sources: Source, Source (array[Source], optional)

## UserMetadata (object)
+ marked_as_favourite: true (boolean, required)

## UserMetadataTopic (object)
+ Include UserMetadata
+ follow: true (boolean, optional)

## UserMetadataArticle (object)
+ Include UserMetadata
+ interaction: `like` (enum[string], optional)
    + Members
        + like
        + dislike

## Head (object)
+ id: 2 (number, required)
+ title: `Hirek` (string, required)
+ type: `mixed_topic_article` (enum[string], required)
    + Members
        + mixed_topic_article
        + celeb

## MixedcontentPager (object)
+ Include Pager
+ data: Mixedcontent, Mixedcontent (array[Mixedcontent], required)

## Mixedcontent (object)
+ topic (TopicRelatedArticles, optional)
    + Include TopicRelatedArticles
+ article (Article, optional)
    + Include Article

## TopicPager (object)
+ Include Pager
+ data: Topic, Topic (array[Topic], required)

## Topic (object)
+ id: 7 (number, required)
+ title: `topic title` (string, required)
+ image_url: `https:\\toptalq.hu\public\upload\image.jpg` (string, required)
+ number_of_articles: 1530 (number, required)
+ number_of_new_articles: 12 (number, optional)
+ number_of_reads: 55437 (number, optional)
+ notification_id: `topic-url-id` (string, required)
+ current_user (optional)
    + Include UserMetadataTopic

## TopicRelatedArticlesPager (object)
+ Include Pager
+ data: TopicRelatedArticles, TopicRelatedArticles (array[TopicRelatedArticles], required)

## TopicRelatedArticles (object)
+ Include Topic
+ related_articles: Article, Article, Article (array[Article], optional)

## TopicDetailed (object)
+ Include Topic
+ description: `topic description` (string, optional)
+ extended_description: `topic extended description` (string, optional)
+ timeline (optional)
    + Include Timeline
+ comment_url: `http:\/\/toptalq.hu\/article\/comment.html` (string, optional)

## Timeline (object)
+ left: `left name` (string, required)
+ right: `right name` (string, required)

## ArticlePager (object)
+ Include Pager
+ data: Article, Article (array[Article], required)

## Article (object)
+ id: 7 (number, required)
+ title: `article title` (string, required)
+ short_description: `article short description` (string, optional)
+ image_url: `http:\/\/toptalq.hu\/public\/upload\/image.jpg` (string, optional)
+ target_url: `http:\/\/externalsite.hu\/target.html` (string, required)
+ source (required)
    + Include Source
+ published_at: `2018-01-30 12:11:10` (string, required)
+ display_type: `small` (enum[string], required)
    + Members
        + small
        + large
        + text
        + video
+ comment_url: `http:\/\/toptalq.hu\/article\/comment.html` (string, optional)
+ current_user (optional)
    + Include UserMetadataArticle

## CelebPager (object)
+ Include Pager
+ data: Celeb, Celeb (array[Celeb], required)

## Celeb (object)
+ id: 7 (number, required)
+ name: `celeb name` (string, required)
+ image_url: `http:\/\/toptalq.hu\/public\/upload\/image.jpg` (string, required)
+ gender: `man` (enum[string], required)
    + Members
        + man
        + woman
+ birth_place: `birth place` (string, required)
+ birth_date: `1900-01-01` (string, required)
+ death_date: `2000-01-01` (string, optional)
+ description: `celeb description` (string, optional)
+ facebook_url: `facebook url` (string, optional)
+ twitter_url: `twitter url` (string, optional)
+ instagram_url: `instagram url` (string, optional)

## Source (object)
+ id: 2 (number, required)
+ title: `origo.hu` (string, required)

